name: Build and Release

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

jobs:
  build-mac:
    runs-on: macos-latest
    permissions:
      contents: read
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Download FFmpeg for macOS
      run: |
        # Simple, robust FFmpeg download for macOS
        echo "Downloading FFmpeg for macOS..."
        
        # Try BtbN builds first (most reliable, always has both binaries)
        if curl -L -f "https://github.com/BtbN/FFmpeg-Builds/releases/download/latest/ffmpeg-master-latest-macos64-gpl.zip" -o ffmpeg-mac.zip; then
          echo "Downloaded BtbN build successfully"
        else
          echo "BtbN failed, trying Evermeet..."
          if curl -L -f "https://evermeet.cx/ffmpeg/getrelease/zip" -o ffmpeg-mac.zip; then
            echo "Downloaded Evermeet build successfully"
          else
            echo "All downloads failed, using Homebrew"
            brew install ffmpeg
            exit 0
          fi
        fi
        
        # Extract and setup
        echo "Extracting FFmpeg..."
        unzip -q ffmpeg-mac.zip
        
        # Find and copy binaries
        echo "Setting up FFmpeg binaries..."
        
        # Look for ffmpeg binary
        if [ -f "ffmpeg" ]; then
          echo "FFmpeg found in root"
        elif [ -f "ffmpeg_temp/ffmpeg" ]; then
          cp ffmpeg_temp/ffmpeg ./ffmpeg
          echo "FFmpeg copied from ffmpeg_temp"
        else
          # Search recursively
          ffmpeg_path=$(find . -name "ffmpeg" -type f | head -1)
          if [ -n "$ffmpeg_path" ]; then
            cp "$ffmpeg_path" ./ffmpeg
            echo "FFmpeg copied from: $ffmpeg_path"
          else
            echo "ERROR: FFmpeg not found"
            exit 1
          fi
        fi
        
        # Look for ffprobe binary
        if [ -f "ffprobe" ]; then
          echo "FFprobe found in root"
        elif [ -f "ffmpeg_temp/ffprobe" ]; then
          cp ffmpeg_temp/ffprobe ./ffprobe
          echo "FFprobe copied from ffmpeg_temp"
        else
          # Search recursively
          ffprobe_path=$(find . -name "ffprobe" -type f | head -1)
          if [ -n "$ffprobe_path" ]; then
            cp "$ffprobe_path" ./ffprobe
            echo "FFprobe copied from: $ffprobe_path"
          else
            echo "ERROR: FFprobe not found"
            exit 1
          fi
        fi
        
        # Make executable
        chmod +x ffmpeg ffprobe
        
        # Verify
        echo "Verifying FFmpeg installation..."
        ./ffmpeg -version
        ./ffprobe -version
        
        # Cleanup
        rm -rf ffmpeg_temp ffmpeg-mac.zip
        echo "FFmpeg setup completed successfully!"
        
    - name: Build macOS app
      run: |
        echo "Current directory: $(pwd)"
        echo "FFmpeg files:"
        ls -la ffmpeg*
        echo "Building macOS app..."
        npm run build-mac
      env:
        ELECTRON_BUILDER_ALLOW_UNRESOLVED_DEPENDENCIES: true
        
    - name: Upload macOS build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: MediaSpooferPro-macOS
        path: dist/
        
  build-win:
    runs-on: windows-latest
    permissions:
      contents: read
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Download FFmpeg for Windows
      run: |
        # Download FFmpeg for Windows with multiple fallback sources
        Write-Host "Downloading FFmpeg for Windows..."
        
        $sources = @(
          "https://github.com/BtbN/FFmpeg-Builds/releases/download/latest/ffmpeg-master-latest-win64-gpl.zip",
          "https://www.gyan.dev/ffmpeg/builds/ffmpeg-release-essentials.zip",
          "https://github.com/ffmpeg/ffmpeg/releases/download/n6.1/ffmpeg-6.1-full_build.zip"
        )
        
        $ffmpegZip = "ffmpeg-win.zip"
        $downloadSuccess = $false
        
        foreach ($source in $sources) {
          try {
            Write-Host "Trying source: $source"
            Invoke-WebRequest -Uri $source -OutFile $ffmpegZip -UseBasicParsing
            
            # Verify file size
            $fileInfo = Get-Item $ffmpegZip
            if ($fileInfo.Length -gt 1000000) {  # More than 1MB
              Write-Host "Successfully downloaded from: $source"
              $downloadSuccess = $true
              break
            } else {
              Write-Host "File too small, trying next source..."
              Remove-Item $ffmpegZip -Force
            }
          } catch {
            Write-Host "Failed to download from: $source"
            Write-Host "Error: $($_.Exception.Message)"
            if (Test-Path $ffmpegZip) {
              Remove-Item $ffmpegZip -Force
            }
          }
        }
        
        if (-not $downloadSuccess) {
          Write-Host "ERROR: All download sources failed!"
          exit 1
        }
        
        Write-Host "Extracting FFmpeg..."
        Expand-Archive -Path $ffmpegZip -DestinationPath "ffmpeg-temp" -Force
        
        Write-Host "Searching for FFmpeg binaries..."
        $ffmpegExe = Get-ChildItem -Path "ffmpeg-temp" -Recurse -Name "ffmpeg.exe" | Select-Object -First 1
        $ffprobeExe = Get-ChildItem -Path "ffmpeg-temp" -Recurse -Name "ffprobe.exe" | Select-Object -First 1
        
        if (-not $ffmpegExe -or -not $ffprobeExe) {
          Write-Host "ERROR: Could not find FFmpeg binaries in extracted files"
          Write-Host "Contents of ffmpeg-temp:"
          Get-ChildItem -Path "ffmpeg-temp" -Recurse | Select-Object FullName
          exit 1
        }
        
        Write-Host "Copying FFmpeg binaries to root directory..."
        Copy-Item "ffmpeg-temp\$ffmpegExe" "ffmpeg.exe"
        Copy-Item "ffmpeg-temp\$ffprobeExe" "ffprobe.exe"
        
        Write-Host "Verifying FFmpeg installation..."
        .\ffmpeg.exe -version
        .\ffprobe.exe -version
        
        Write-Host "Cleaning up..."
        Remove-Item -Recurse -Force "ffmpeg-temp"
        Remove-Item $ffmpegZip -Force
        
        Write-Host "FFmpeg setup completed successfully!"
        
    - name: Build Windows app
      run: |
        echo "Current directory: $(pwd)"
        echo "FFmpeg files before build:"
        dir ffmpeg*
        echo "Building Windows app..."
        npm run build-win
      env:
        ELECTRON_BUILDER_ALLOW_UNRESOLVED_DEPENDENCIES: true
        
    - name: Upload Windows build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: MediaSpooferPro-Windows
        path: dist/
        
  release:
    needs: [build-mac, build-win]
    runs-on: ubuntu-latest
    if: github.event_name == 'release'
    permissions:
      contents: write
    
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      
    - name: Create release assets
      run: |
        mkdir -p release-assets
        mv MediaSpooferPro-macOS/* release-assets/ || true
        mv MediaSpooferPro-Windows/* release-assets/ || true
        echo "Release assets created:"
        ls -la release-assets/
        
        # Find and rename the actual files for upload
        # Look for universal DMG first, then fallback to any DMG
        universal_dmg=$(find release-assets -name "*.dmg" -not -name "*arm64*" -not -name "*x64*" | head -1)
        if [ -n "$universal_dmg" ]; then
          echo "Found universal macOS DMG: $universal_dmg"
          cp "$universal_dmg" "MediaSpooferPro-${{ github.event.release.tag_name }}-macOS.dmg"
        else
          # Fallback to any DMG file
          for file in release-assets/*.dmg; do
            if [ -f "$file" ]; then
              echo "Found macOS DMG: $file"
              cp "$file" "MediaSpooferPro-${{ github.event.release.tag_name }}-macOS.dmg"
              break
            fi
          done
        fi
        
        for file in release-assets/*.exe; do
          if [ -f "$file" ]; then
            echo "Found Windows EXE: $file"
            cp "$file" "MediaSpooferPro-${{ github.event.release.tag_name }}-Windows.exe"
          fi
        done
        
        echo "Files ready for upload:"
        ls -la MediaSpooferPro-*
        
    - name: Upload release assets
      uses: softprops/action-gh-release@v2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        files: |
          MediaSpooferPro-${{ github.event.release.tag_name }}-macOS.dmg
          MediaSpooferPro-${{ github.event.release.tag_name }}-Windows.exe
        tag_name: ${{ github.event.release.tag_name }}
        name: ${{ github.event.release.name }}
        body: ${{ github.event.release.body }}
        draft: false
        prerelease: false 