name: Build and Release

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

jobs:
  build-mac:
    runs-on: macos-latest
    permissions:
      contents: read
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Download FFmpeg for macOS
      run: |
        # Download FFmpeg for macOS from a reliable source
        echo "Downloading FFmpeg for macOS..."
        curl -L https://evermeet.cx/ffmpeg/getrelease/zip -o ffmpeg.zip
        
        echo "Extracting FFmpeg to temp directory..."
        mkdir -p ffmpeg_temp
        unzip ffmpeg.zip -d ffmpeg_temp/
        
        echo "Downloading ffprobe for macOS..."
        curl -L https://evermeet.cx/ffprobe/getrelease/zip -o ffprobe.zip
        
        echo "Extracting ffprobe to temp directory..."
        mkdir -p ffprobe_temp
        unzip ffprobe.zip -d ffprobe_temp/
        
        echo "Checking contents of temp directories..."
        echo "ffmpeg_temp contents:"
        ls -la ffmpeg_temp/
        echo "ffprobe_temp contents:"
        ls -la ffprobe_temp/
        
        echo "Copying files to root directory..."
        cp ffmpeg_temp/ffmpeg ./ffmpeg
        cp ffprobe_temp/ffmpeg ./ffprobe
        
        echo "Cleaning up temp directories..."
        rm -rf ffmpeg_temp ffprobe_temp
        
        echo "Checking extracted files..."
        ls -la
        
        # Check if both files exist
        if [ ! -f "ffmpeg" ]; then
            echo "ERROR: ffmpeg file not found!"
            exit 1
        fi
        
        if [ ! -f "ffprobe" ]; then
            echo "ERROR: ffprobe file not found!"
            exit 1
        fi
        
        # Make executable
        chmod +x ffmpeg
        chmod +x ffprobe
        
        echo "Verifying FFmpeg installation..."
        ./ffmpeg -version
        ./ffprobe -version
        
        echo "FFmpeg download and setup completed successfully!"
        
    - name: Build macOS app
      run: |
        echo "Current directory: $(pwd)"
        echo "FFmpeg files:"
        ls -la ffmpeg*
        echo "Building macOS app..."
        npm run build-mac
      env:
        ELECTRON_BUILDER_ALLOW_UNRESOLVED_DEPENDENCIES: true
        
    - name: Upload macOS build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: MediaSpooferPro-macOS
        path: dist/
        
  build-win:
    runs-on: windows-latest
    permissions:
      contents: read
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Download FFmpeg for Windows
      run: |
        # Download FFmpeg for Windows
        $ffmpegUrl = "https://github.com/BtbN/FFmpeg-Builds/releases/download/latest/ffmpeg-master-latest-win64-gpl.zip"
        $ffmpegZip = "ffmpeg-win.zip"
        
        Write-Host "Downloading FFmpeg from: $ffmpegUrl"
        try {
            Invoke-WebRequest -Uri $ffmpegUrl -OutFile $ffmpegZip -UseBasicParsing
        } catch {
            Write-Host "Failed to download from primary URL, trying alternative..."
            $altUrl = "https://www.gyan.dev/ffmpeg/builds/ffmpeg-release-essentials.zip"
            Invoke-WebRequest -Uri $altUrl -OutFile $ffmpegZip -UseBasicParsing
        }
        
        Write-Host "Extracting FFmpeg..."
        Expand-Archive -Path $ffmpegZip -DestinationPath "ffmpeg-temp" -Force
        
        Write-Host "Looking for FFmpeg binaries..."
        Get-ChildItem -Path "ffmpeg-temp" -Recurse -Name "ffmpeg.exe"
        Get-ChildItem -Path "ffmpeg-temp" -Recurse -Name "ffprobe.exe"
        
        Write-Host "Copying FFmpeg binaries..."
        $ffmpegExe = Get-ChildItem -Path "ffmpeg-temp" -Recurse -Name "ffmpeg.exe" | Select-Object -First 1
        $ffprobeExe = Get-ChildItem -Path "ffmpeg-temp" -Recurse -Name "ffprobe.exe" | Select-Object -First 1
        
        if ($ffmpegExe) {
            Copy-Item "ffmpeg-temp\$ffmpegExe" "ffmpeg.exe"
        }
        if ($ffprobeExe) {
            Copy-Item "ffmpeg-temp\$ffprobeExe" "ffprobe.exe"
        }
        
        Write-Host "Verifying FFmpeg installation..."
        if (Test-Path "ffmpeg.exe") {
            .\ffmpeg.exe -version
        } else {
            Write-Host "ERROR: ffmpeg.exe not found!"
            exit 1
        }
        if (Test-Path "ffprobe.exe") {
            .\ffprobe.exe -version
        } else {
            Write-Host "ERROR: ffprobe.exe not found!"
            exit 1
        }
        
        Write-Host "FFmpeg download and setup completed successfully!"
        
    - name: Build Windows app
      run: |
        echo "Current directory: $(pwd)"
        echo "FFmpeg files:"
        dir ffmpeg*
        echo "Building Windows app..."
        npm run build-win
      env:
        ELECTRON_BUILDER_ALLOW_UNRESOLVED_DEPENDENCIES: true
        
    - name: Upload Windows build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: MediaSpooferPro-Windows
        path: dist/
        
  release:
    needs: [build-mac, build-win]
    runs-on: ubuntu-latest
    if: github.event_name == 'release'
    permissions:
      contents: write
    
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      
    - name: Create release assets
      run: |
        mkdir -p release-assets
        mv MediaSpooferPro-macOS/* release-assets/ || true
        mv MediaSpooferPro-Windows/* release-assets/ || true
        echo "Release assets created:"
        ls -la release-assets/
        
        # Find and rename the actual files for upload
        for file in release-assets/*.dmg; do
          if [ -f "$file" ]; then
            echo "Found macOS DMG: $file"
            cp "$file" "MediaSpooferPro-${{ github.event.release.tag_name }}-macOS.dmg"
          fi
        done
        
        for file in release-assets/*.exe; do
          if [ -f "$file" ]; then
            echo "Found Windows EXE: $file"
            cp "$file" "MediaSpooferPro-${{ github.event.release.tag_name }}-Windows.exe"
          fi
        done
        
        echo "Files ready for upload:"
        ls -la MediaSpooferPro-*
        
    - name: Upload release assets
      uses: softprops/action-gh-release@v2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        files: |
          MediaSpooferPro-${{ github.event.release.tag_name }}-macOS.dmg
          MediaSpooferPro-${{ github.event.release.tag_name }}-Windows.exe
        tag_name: ${{ github.event.release.tag_name }}
        name: ${{ github.event.release.name }}
        body: ${{ github.event.release.body }}
        draft: false
        prerelease: false 